# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - IyC-Taller

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    outputs:
      failures: ${{ steps.extract-failures.outputs.failures }}
      has_failures: ${{ steps.extract-failures.outputs.has_failures }}
      test_result: ${{ steps.extract-failures.outputs.test_result }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests with coverage
        id: run-tests
        continue-on-error: true
        run: |
          set -o pipefail
          coverage run -m pytest -v --tb=short 2>&1 | tee result.log
          TEST_EXIT_CODE=$?
          coverage xml || true
          echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          exit $TEST_EXIT_CODE

      - name: Extract failed tests
        id: extract-failures
        if: always()
        run: |
          echo "Extracting test failures..."

          TEST_EXIT_CODE="${{ steps.run-tests.outputs.test_exit_code }}"

          FAILURES=$(grep "FAILED" result.log | sed 's/^[[:space:]]*//' | head -10 || echo "")

          FAILURE_COUNT=$(echo "$FAILURES" | grep -c "FAILED" || echo "0")

          if [ "$FAILURE_COUNT" -gt 0 ] || [ "$TEST_EXIT_CODE" != "0" ]; then
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "test_result=failure" >> $GITHUB_OUTPUT
            echo "Found $FAILURE_COUNT failed tests (exit code: $TEST_EXIT_CODE)"
            
            FORMATTED_FAILURES=""
            if [ "$FAILURE_COUNT" -gt 0 ]; then
              FORMATTED_FAILURES=$(echo "$FAILURES" | awk '{print "‚Ä¢ " $1}' | grep -v "‚Ä¢ FAILED" | sort | uniq)
            fi
            
            echo "failures<<EOF" >> $GITHUB_OUTPUT
            echo "$FORMATTED_FAILURES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has_failures=false" >> $GITHUB_OUTPUT
            echo "test_result=success" >> $GITHUB_OUTPUT
            echo "failures=" >> $GITHUB_OUTPUT
          fi

          if [ "$TEST_EXIT_CODE" != "0" ]; then
            echo "Tests failed with exit code $TEST_EXIT_CODE"
            exit 1
          fi

      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Zip artifact for deployment
        run: zip -r release.zip . -x "venv/*"

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_526EE1B0F7F146CAAAC7451F96F069A0 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_8FEE34FDB235446B996988846686E449 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_F7EC2C0398124DDD80F7A4E4CFD6A5CE }}

      - name: "Deploy to Azure Web App"
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: "IyC-Taller"
          slot-name: "Production"

  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    steps:
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEST_RESULT: ${{ needs.build.outputs.test_result }}
          TEST_FAILURES: ${{ needs.build.outputs.failures }}
          HAS_FAILURES: ${{ needs.build.outputs.has_failures }}
          DEPLOY_STATUS: ${{ needs.deploy.result }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_AUTHOR: ${{ github.event.head_commit.author.name }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
          AZURE_WEBAPP_URL: ${{ secrets.AZURE_WEBAPP_URL }}
          AZURE_DEPLOY_URL: ${{ secrets.AZURE_DEPLOY_URL }}
        run: |
          if [[ "$TEST_RESULT" == "success" && "$DEPLOY_STATUS" == "success" ]]; then
            STATUS="‚úÖ *Despliegue exitoso: Entorno de Producci√≥n*"
            COLOR="good"
          else
            STATUS="‚ùå *Fallos detectados: Entorno de Producci√≥n*"
            COLOR="danger"
          fi

          DETAILS=""
          if [[ "$TEST_RESULT" != "success" ]]; then
            if [[ "$HAS_FAILURES" == "true" && -n "$TEST_FAILURES" ]]; then
              DETAILS="${DETAILS}\n\n*üß™ Tests fallidos:*\n${TEST_FAILURES}"
            else
              DETAILS="${DETAILS}\n\n*üß™ Tests:* Error en la ejecuci√≥n"
            fi
          fi

          if [[ "$DEPLOY_STATUS" != "success" ]]; then
            DETAILS="${DETAILS}\n\n*üöÄ Despliegue:* ${DEPLOY_STATUS}"
          fi

          MESSAGE="${STATUS}${DETAILS}\n\n*üë§ Autor del commit:* ${COMMIT_AUTHOR}\n*üí¨ Mensaje del commit:* ${COMMIT_MESSAGE}\n*üîó Ver en GitHub:* ${COMMIT_URL}\n*‚òÅÔ∏è Ver en el Portal de Azure:* ${AZURE_WEBAPP_URL}\n*üåê Ver aplicaci√≥n:* ${AZURE_DEPLOY_URL}"

          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [
                {
                  \"color\": \"$COLOR\",
                  \"text\": \"$MESSAGE\",
                  \"mrkdwn_in\": [\"text\"]
                }
              ]
            }" \
            "$SLACK_WEBHOOK_URL"
