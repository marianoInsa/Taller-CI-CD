name: Test and Scan - Dev Branch

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      failure: ${{ steps.extract-failures.outputs.failure }}
      has_failures: ${{ steps.extract-failures.outputs.has_failures }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests with coverage
        id: run-tests
        continue-on-error: true
        run: |
          set -o pipefail
          coverage run -m pytest --tb=short 2>&1 | tee result.log
          coverage xml || true

      - name: Extract failed tests
        id: extract-failures
        if: always()
        run: |
          echo "Running extract..."
          FAILURES=$(grep "FAILED" result.log | sed 's/^[[:space:]]*//' | head -10 || echo "")
          FAILURE_COUNT=$(echo "$FAILURES" | grep -c "FAILED" || echo "0")

          if [ "$FAILURE_COUNT" -gt 0 ]; then
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "Found $FAILURE_COUNT failed tests"
            
            FORMATTED_FAILURES=""
            while IFS= read -r line; do
              if [[ "$line" == *"FAILED"* ]]; then
                TEST_NAME=$(echo "$line" | awk '{print $1}')
                FORMATTED_FAILURES="${FORMATTED_FAILURES}‚Ä¢ ${TEST_NAME}\n"
              fi
            done <<< "$FAILURES"
            
            echo "failures<<EOF" >> $GITHUB_OUTPUT
            echo -e "$FORMATTED_FAILURES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has_failures=false" >> $GITHUB_OUTPUT
            echo "failures=" >> $GITHUB_OUTPUT
          fi

  scan:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  notify:
    runs-on: ubuntu-latest
    needs: [test, scan]
    if: always()
    steps:
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEST_STATUS: ${{ needs.test.result }}
          TEST_FAILURES: ${{ needs.test.outputs.failures }}
          HAS_FAILURES: ${{ needs.test.outputs.has_failures }}
          SCAN_STATUS: ${{ needs.scan.result }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_AUTHOR: ${{ github.event.head_commit.author.name }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
        run: |
          if [[ "$TEST_STATUS" == "success" && "$SCAN_STATUS" == "success" ]]; then
            STATUS="‚úÖ Integraci√≥n exitosa: Entorno de Desarrollo"
            color="good"
          else
            STATUS="‚ùå Fallos detectados: Entorno de Desarrollo"
            color="danger"
          fi

          DETAILS=""
          if [[ "$TEST_STATUS" != "success" ]]; then
            if [[ "$HAS_FAILURES" == "true" && -n "$TEST_FAILURES" ]]; then
              DETAILS="${DETAILS}\n\n*üß™ Tests fallidos:*\n${TEST_FAILURES}"
            else
              DETAILS="${DETAILS}\n\n*üß™ Tests:* Error en la ejecuci√≥n"
            fi
          fi

          if [[ "$SCAN_STATUS" != "success" ]]; then
            DETAILS="${DETAILS}\n\n*üîç An√°lisis SonarQube:* ${SCAN_STATUS}"
          fi

          MESSAGE="${STATUS}${DETAILS}\n\n*üë§ Autor:* ${COMMIT_AUTHOR}\n*üí¨ Commit:* ${COMMIT_MESSAGE}\n*üîó Ver en GitHub:* ${COMMIT_URL}"

          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [
                {
                  \"color\": \"$COLOR\",
                  \"text\": \"$MESSAGE\",
                  \"mrkdwn_in\": [\"text\"]
                }
              ]
            }" \
            "$SLACK_WEBHOOK_URL"
